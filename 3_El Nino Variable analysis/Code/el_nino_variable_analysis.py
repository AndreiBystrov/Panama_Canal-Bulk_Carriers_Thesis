# -*- coding: utf-8 -*-
"""El Nino variable analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qcMC_wvjVj9whIKLrsZlpU-zBP1sv5jM
"""

#Library import
import pyarrow as pa
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
import statistics
import numpy as np
from datetime import datetime

#Read both parquet files
ONI_all = pd.read_parquet('SST_all.parquet')
WL_all = pd.read_parquet('WL_all.parquet')
display (ONI_all, WL_all)

ONI_all.info()

#convert to numeric
ONI_all.rename(columns={'SST': 'ONI'}, inplace=True)
ONI_all['ONI'] = pd.to_numeric(ONI_all['ONI'])
# Strip leading/trailing spaces from 'Year_Month' column before converting to datetime
ONI_all['Year_Month'] = ONI_all['Year_Month'].str.strip()
ONI_all['Year_Month'] = pd.to_datetime(ONI_all['Year_Month'], format='%Y-%m')

# Merge the two DataFrames on 'Year_Month'
WL_ONI_all= pd.merge(ONI_all, WL_all, on='Year_Month', how='inner')

# Display the merged DataFrame
display(WL_ONI_all)

WL_ONI_all['El-Nino'] = WL_ONI_all['ONI'].apply(lambda x: 1 if x >= 0.5 else 0)
WL_ONI_all['La-Nina'] = WL_ONI_all['ONI'].apply(lambda x: 1 if x <= -0.5 else 0)
WL_ONI_all

# Create lagged ONI columns
for i in range(1, 7):
    WL_ONI_all[f'WL_lag_{i}'] = WL_ONI_all['Water_Level_m'].shift(i)

# Display the final DataFrame
display(WL_ONI_all)

# Create lagged ONI columns
for i in range(1, 7):
    (WL_ONI_all)[f'ONI_lag_{i}'] = (WL_ONI_all)['ONI'].shift(i)

# Display the final DataFrame
display(WL_ONI_all)

# Select the columns for correlation analysis
columns_for_correlation = ['ONI', 'Water_Level_m', 'WL_lag_1', 'WL_lag_2', 'WL_lag_3', 'WL_lag_4', 'WL_lag_5', 'WL_lag_6', 'ONI_lag_1',	'ONI_lag_2',	'ONI_lag_3',	'ONI_lag_4',	'ONI_lag_5',	'ONI_lag_6']

# Calculate the correlation matrix
correlation_matrix = WL_ONI_all[columns_for_correlation].corr()

# Display the correlation matrix
display(correlation_matrix)

# Filter the DataFrame for El Nino events
el_nino_data = WL_ONI_all[WL_ONI_all['El-Nino'] == 1]

# Select the columns for correlation analysis
columns_for_correlation = ['ONI', 'Water_Level_m', 'WL_lag_1', 'WL_lag_2', 'WL_lag_3', 'WL_lag_4', 'WL_lag_5', 'WL_lag_6', 'ONI_lag_1',	'ONI_lag_2',	'ONI_lag_3',	'ONI_lag_4',	'ONI_lag_5',	'ONI_lag_6']

# Calculate the correlation matrix for El Nino events
el_nino_correlation_matrix = el_nino_data[columns_for_correlation].corr()

# Display the correlation matrix for El Nino events
display(el_nino_correlation_matrix)

print(len(el_nino_data))

# Filter the DataFrame for El Nino events
la_nina_data = WL_ONI_all[WL_ONI_all['La-Nina'] == 1]

# Select the columns for correlation analysis
columns_for_correlation = ['ONI', 'Water_Level_m', 'WL_lag_1', 'WL_lag_2', 'WL_lag_3', 'WL_lag_4', 'WL_lag_5', 'WL_lag_6', 'ONI_lag_1',	'ONI_lag_2',	'ONI_lag_3',	'ONI_lag_4',	'ONI_lag_5',	'ONI_lag_6']

# Calculate the correlation matrix for El Nino events
la_nina_correlation_matrix = la_nina_data[columns_for_correlation].corr()

# Display the correlation matrix for El Nino events
display(la_nina_correlation_matrix)

print(len(la_nina_data))

# Select the columns for correlation analysis
columns_for_correlation = ['El-Nino', 'Water_Level_m', 'WL_lag_1', 'WL_lag_2', 'WL_lag_3', 'WL_lag_4', 'WL_lag_5', 'WL_lag_6', 'ONI_lag_1',	'ONI_lag_2',	'ONI_lag_3',	'ONI_lag_4',	'ONI_lag_5',	'ONI_lag_6']

# Calculate the correlation matrix
correlation_matrix = WL_ONI_all[columns_for_correlation].corr()

# Display the correlation matrix
display(correlation_matrix)

#read Bulk_PA 1
Bulk_PA= pd.read_parquet('Bulk_PA_Clean.parquet')
display(Bulk_PA)

# Group by 'proxy_transit_month' and count transits
Bulk_PA['proxy_transit_month'] = Bulk_PA['load_end_date'].dt.to_period('M')
transit_counts = Bulk_PA.groupby('proxy_transit_month').size().reset_index(name='number_transits')

# Display the new DataFrame
display(transit_counts)

# Assuming Bulk_PA is already defined

# Create the plot
plt.figure(figsize=(12, 6))
plt.plot(transit_counts['proxy_transit_month'].dt.to_timestamp(), transit_counts['number_transits'], marker='o')  # Convert to timestamp for plotting
plt.title('Monthly Bulk Transits')
plt.xlabel('Month')
plt.ylabel('Number of Transits')
plt.grid(True)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()

# WL_ONI_all filter to filter dates from 2019-01-01 to 2024-12-01
WL_ONI_19_24 = WL_ONI_all[(WL_ONI_all['Year_Month'] >= '2019-01-01') & (WL_ONI_all['Year_Month'] <= '2025-01-01')].reset_index(drop=True)
WL_ONI_19_24

# Merge WL_ONI_19_24 and transit_counts
WL_ONI_19_24['Year_Month'] = WL_ONI_19_24['Year_Month'].dt.to_period('M')
WL_ONI_19_24_PA = pd.merge(WL_ONI_19_24, transit_counts, left_on='Year_Month', right_on='proxy_transit_month', how='left')
WL_ONI_19_24_PA.drop(columns=['proxy_transit_month'], inplace=True)
WL_ONI_19_24_PA

WL_ONI_19_24_PA

# Select the columns for correlation analysis
columns_for_correlation = ['number_transits','ONI','El-Nino', 'Water_Level_m', 'WL_lag_1', 'WL_lag_2', 'WL_lag_3', 'WL_lag_4', 'WL_lag_5', 'WL_lag_6', 'ONI_lag_1',	'ONI_lag_2',	'ONI_lag_3',	'ONI_lag_4',	'ONI_lag_5',	'ONI_lag_6']

# Calculate the correlation matrix
correlation_matrix = WL_ONI_19_24_PA[columns_for_correlation].corr()

# Display the correlation matrix
display(correlation_matrix)

"""# **EL-Nino indicator**"""

import matplotlib.dates as mdates
# Crete a side by side view of ONI and water level change
# Plot ONI
WL_ONI_14_24 = WL_ONI_all[WL_ONI_all['Year_Month']>= '2019-01-01']
plt.figure(figsize=(16, 6))
plt.plot(WL_ONI_14_24['Year_Month'],
         WL_ONI_14_24['ONI'], label='ONI')
plt.title('ONI Over Time')
plt.xlabel('Year-Month')
plt.ylabel('ONI Value')
plt.legend()
plt.grid(True)

# Add horizontal lines for ONI
plt.axhline(y=0.5, color='red', linestyle='--', label='ONI = 0.5')
plt.axhline(y=-0.5, color='red', linestyle='--', label='ONI = -0.5')

# Format x-axis to show months and years
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gcf().autofmt_xdate()


# Plot Water_Level_m
plt.figure(figsize=(16, 6))
plt.plot(WL_ONI_14_24['Year_Month'], WL_ONI_14_24['Water_Level_m'], label='Water Level (m)')
plt.title('Water Level Over Time')
plt.xlabel('Year-Month')
plt.ylabel('Water Level (m)')
plt.legend()
plt.grid(True)

# Calculate Q1, Q2, Q3 for Water Level from 2019-01 to 2023-06
# Filter data for the specified date range
filtered_data = WL_ONI_14_24[(WL_ONI_14_24['Year_Month'] >= '2019-01-01') & (WL_ONI_14_24['Year_Month'] <= '2023-06-01')]

# Calculate quartiles
Q1 = np.quantile(filtered_data['Water_Level_m'], 0.25)
Q2 = np.quantile(filtered_data['Water_Level_m'], 0.50)
Q3 = np.quantile(filtered_data['Water_Level_m'], 0.75)

# Add horizontal lines for Water Level quartiles
plt.axhline(y=Q1, color='red', linestyle='--', label='Q1')
plt.axhline(y=Q2, color='red', linestyle='--', label='Q2 (Median)')
plt.axhline(y=Q3, color='red', linestyle='--', label='Q3')

# Format x-axis to show months and years
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gcf().autofmt_xdate()
plt.show()

# Plot of number of transits per month
plt.figure(figsize=(16, 6))
plt.plot(WL_ONI_19_24_PA['Year_Month'].dt.to_timestamp(), WL_ONI_19_24_PA['number_transits'], label='Number of Transits')
plt.title('Number of Transits Over Time')
plt.xlabel('Year-Month')
plt.ylabel('Number of Transits')
plt.legend()
plt.grid(True)

# Format x-axis to show months and years
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gcf().autofmt_xdate()

plt.show()

pd.set_option('display.max_rows', None)
WL_ONI_19_24_PA

# Select the columns for correlation analysis
columns_for_correlation = ['ONI','El-Nino', 'Water_Level_m', 'WL_lag_1', 'WL_lag_2', 'WL_lag_3', 'WL_lag_4', 'WL_lag_5', 'WL_lag_6', 'ONI_lag_1',	'ONI_lag_2',	'ONI_lag_3',	'ONI_lag_4',	'ONI_lag_5',	'ONI_lag_6']

# Calculate the correlation matrix
correlation_matrix = WL_ONI_14_24[columns_for_correlation].corr()

# Display the correlation matrix
display(correlation_matrix)

import matplotlib.dates as mdates
# Create a graph identifying the periods of El Nino

# Create the scatter plot
plt.figure(figsize=(22, 10))
plt.scatter(WL_ONI_14_24['Year_Month'], WL_ONI_14_24['El-Nino'], label='El Nino Events')
plt.title('El Nino Events Over Time')
plt.xlabel('Year-Month')
plt.ylabel('El Nino (1 = Event, 0 = No Event)')
plt.legend()
plt.grid(True)

# Format x-axis to show all years
plt.gca().xaxis.set_major_locator(mdates.YearLocator())
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.gcf().autofmt_xdate()
plt.show()

"""# **Linear relationship between variables**"""

# Scatter plot ONI and Number of monthly transits
plt.figure(figsize=(10, 6))
plt.scatter(WL_ONI_19_24_PA['ONI'], WL_ONI_19_24_PA['number_transits'])
plt.title('ONI vs. Number of Monthly Transits')
plt.xlabel('ONI Value')
plt.ylabel('Number of Transits')
plt.grid(True)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Scatter plot with regression line
plt.figure(figsize=(10, 6))
sns.regplot(x='ONI', y='number_transits', data=WL_ONI_19_24_PA)
plt.title('ONI vs. Number of Monthly Transits with Regression Line')
plt.xlabel('ONI Value')
plt.ylabel('Number of Transits')
plt.grid(True)
plt.show()

# Scatter plot with regression line for Water Level and Number of Transits
plt.figure(figsize=(10, 6))
sns.regplot(x='Water_Level_m', y='number_transits', data=WL_ONI_19_24_PA)
plt.title('Water Level vs. Number of Monthly Transits with Regression Line')
plt.xlabel('Water Level (m)')
plt.ylabel('Number of Transits')
plt.grid(True)
plt.show()

# Scatter plot with regression line for Water Level and Number of Transits
plt.figure(figsize=(10, 6))
sns.regplot(x='Water_Level_m', y='number_transits', data=WL_ONI_19_24_PA)

# Calculate the slope and intercept
slope, intercept = np.polyfit(WL_ONI_19_24_PA['Water_Level_m'], WL_ONI_19_24_PA['number_transits'], 1)

# Create the formula string
formula = f'y = {slope:.2f}x {intercept:.2f}'

# Add the formula to the plot
# You may need to adjust the coordinates (x, y) to position the text appropriately
plt.text(0.05, 0.95, formula, transform=plt.gca().transAxes, fontsize=12,
         verticalalignment='top', bbox=dict(boxstyle='round,pad=0.5', fc='wheat', alpha=0.5))

plt.title('Water Level vs. Number of Monthly Transits with Regression Line and Formula')
plt.xlabel('Water Level (m)')
plt.ylabel('Number of Transits')
plt.grid(True)
plt.show()

"""#Distribution of monthly transits"""

# Distribution of monthly trnasits histogram
plt.figure(figsize=(10, 6))
sns.histplot(data=WL_ONI_19_24_PA, x='number_transits', bins=20, edgecolor='black', kde=True) # Use seaborn.histplot with kde=True

plt.title('Distribution of Monthly Transits (2019-2024)')
plt.xlabel('Number of Transits')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()