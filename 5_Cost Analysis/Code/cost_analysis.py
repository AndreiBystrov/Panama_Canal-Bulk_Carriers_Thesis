# -*- coding: utf-8 -*-
"""Cost Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1fRgJbB-aqKWROsTZ3fQvw9yPNSxrtz
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import matplotlib.ticker as mticker
import numpy as np
import seaborn as sns

"""# **Distribution analysis of the parameters for the cost structure**"""

# Import Bulk_PA from parquet
Bulk_PA = pd.read_parquet('Bulk_PA_final.parquet')

# Show all the columns
pd.set_option('display.max_columns', None)

Bulk_PA

# List all the unique region_pair
Bulk_PA['region_pairs'].unique()

"""## **DWT distribution**

As we can see, the distribution of vsl_dwt is asymmetric towards the maximum. Therefore, we use the median to aggregate the data
"""

# Vessel's dwt distribution
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='vsl_dwt', data=Bulk_PA[Bulk_PA['proxy_transit_month']<'2023-06'])
plt.title('Distribution of DWT by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('vsl_dwt')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

"""## **Fuel consumption distribution**"""

# Vessel's fuel consumption distribution pre-EL Nino
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='fuel_consumption_mt', data=Bulk_PA[Bulk_PA['proxy_transit_month']<'2023-06'])
plt.title('Distribution of Fuel Consumption by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('fuel consumption (mt)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

# Vessel's fuel consumption distribution for the whole data set
'''for all the time period'''
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='fuel_consumption_mt', data=Bulk_PA[Bulk_PA['proxy_transit_month']<'2025-01'])
plt.title('Distribution of Fuel Consumption by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('fuel consumption (mt)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

Bulk_PA['fuel_consumption_mt'].describe()

"""The outliers need to be imputed. They are not valid input."""

def replace_outliers_with_median_by_region(df, column_name, region_column, multiplier=1.5):
    """Replaces outliers with the median of the corresponding region pair.

    Args:
        df: The DataFrame to modify.
        column_name: The name of the column containing the data to check for outliers.
        region_column: The name of the column containing the region information.
        multiplier: The IQR multiplier to define outliers (default: 1.5).

    Returns:
        The modified DataFrame with outliers replaced with region median values.
    """

    # Create a copy of the original column to compare against
    original_values = df[column_name].copy()

    # Calculate the median for each region pair
    region_pair_medians = df.groupby(region_column)[[column_name]].median()

    for region in df[region_column].unique():
        region_data = df[df[region_column] == region][column_name]
        Q1 = region_data.quantile(0.25)
        Q3 = region_data.quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - multiplier * IQR
        upper_bound = Q3 + multiplier * IQR

        # Replace outliers for the current region with the median for that region
        df.loc[
            (df[region_column] == region)
            & ((df[column_name] < lower_bound) | (df[column_name] > upper_bound)),
            column_name,
        ] = region_pair_medians.loc[region, column_name]  # Use pre-calculated medians

    # Count the number of changed values
    changed_count = (df[column_name] != original_values).sum()

    return df, changed_count

# Apply the function and get the changed count
Bulk_PA, changed_count = replace_outliers_with_median_by_region(Bulk_PA, 'fuel_consumption_mt', 'region_pairs')

# Print the changed count
print(f"Number of values changed: {changed_count}")

# Vessel's fuel consumption distribution
'''for all the time period'''
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='fuel_consumption_mt', data=Bulk_PA[Bulk_PA['proxy_transit_month']<'2025-01'])
plt.title('Distribution of Fuel Consumption by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('fuel consumption (mt)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

"""# **Cost analysis for rerouted vessels during El-Nino**: 2023-06 to 2023-10"""

# Read Bulk_rerouted from parquet
Bulk_rerouted = pd.read_parquet('Bulk_rerouted.parquet')
Bulk_PA_Before_ElNino = pd.read_parquet('Bulk_PA_before_ElNino.parquet')
Bulk_rerouted

"""## **Daily capital cost**"""

# Convert 'voy_sea_duration_h' to days
Bulk_rerouted['voy_sea_duration_day'] = Bulk_rerouted['voy_sea_duration_h'] / 24
Bulk_PA_Before_ElNino['voy_sea_duration_day'] = Bulk_PA_Before_ElNino['voy_sea_duration_h'] / 24

# Create a column capital_cost
# Initialize the new column
Bulk_rerouted['capital_cost'] = np.nan
# Same for Bulk_PA_Before_ElNino
Bulk_PA_Before_ElNino['capital_cost'] = np.nan

# Calculate the capital cost
Bulk_rerouted['capital_cost'] =  20.971*(372.53+7.94E-03*Bulk_rerouted['vsl_dwt']**(1.2))**0.6988
Bulk_PA_Before_ElNino['capital_cost'] =  20.971*(372.53+7.94E-03*Bulk_PA_Before_ElNino['vsl_dwt']**(1.2))**0.6988
Bulk_rerouted

# Capital cost distribution for Bulk_rerouted
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='capital_cost', data=Bulk_rerouted)
plt.title('Distribution of Daily Capital Cost by Region Pair During El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('daily capital cost ($)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

# Capital cost distribution for Bulk_PA_Before_ElNino
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='capital_cost', data=Bulk_PA_Before_ElNino)
plt.title('Distribution of Daily Capital Cost by Region Pair before El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('daily capital cost ($)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

"""TEU to DWT convertion formula: TEU = 372.53+7.94E-03*DWT^(1.2)
Source: Abramowski et al. (2021)

## **Daily operating cost**
"""

# Create a column operating_cost
# Initialize the new column
Bulk_rerouted['operating_cost'] = np.nan
Bulk_PA_Before_ElNino['operating_cost'] = np.nan

# Calculate the operating cost
Bulk_rerouted['operating_cost'] =  952.9*(372.53+7.94E-03*Bulk_rerouted['vsl_dwt']**(1.2))**0.2162
Bulk_PA_Before_ElNino['operating_cost'] =  952.9*(372.53+7.94E-03*Bulk_PA_Before_ElNino['vsl_dwt']**(1.2))**0.2162
Bulk_rerouted

# Operating cost distribution Bulk_rerouted
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='operating_cost', data=Bulk_rerouted)
plt.title('Distribution of Daily Operating Cost by Region Pair During El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('daily operating cost ($)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()


# Operating cost distribution Bulk_PA_Before_ElNino
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='operating_cost', data=Bulk_PA_Before_ElNino)
plt.title('Distribution of Daily Operating Cost by Region Pair Before El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('daily operating cost ($)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

"""## **Daily fuel cost**"""

# Create a column fuel_cost
# Initialize the new column
Bulk_rerouted['fuel_cost'] = np.nan
Bulk_PA_Before_ElNino['fuel_cost'] = np.nan

# Calculate the fuel cost
Bulk_rerouted['daily_fuel_consumption'] = Bulk_rerouted['fuel_consumption_mt']/Bulk_rerouted['voy_sea_duration_day']
Bulk_PA_Before_ElNino['daily_fuel_consumption'] = Bulk_PA_Before_ElNino['fuel_consumption_mt']/Bulk_PA_Before_ElNino['voy_sea_duration_day']
Bulk_rerouted['fuel_cost'] = Bulk_rerouted['IFO380'] * Bulk_rerouted['daily_fuel_consumption']
Bulk_PA_Before_ElNino['fuel_cost'] = Bulk_PA_Before_ElNino['IFO380'] * Bulk_PA_Before_ElNino['daily_fuel_consumption']
Bulk_rerouted

# Fuel cost distribution for Bulk_rerouted
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='fuel_cost', data=Bulk_rerouted)
plt.title('Distribution of Daily Fuel Cost by Region Pair During El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('daily fuel cost ($)')
plt.xticks(rotation=60, ha='right')

# Format y-axis tick labels
def format_y_ticks(value, _):
    return int(value)  # Format as integer

plt.gca().yaxis.set_major_formatter(mticker.FuncFormatter(format_y_ticks))

plt.tight_layout()
plt.show()

# Fuel cost distribution for Bulk_PA_Before_ElNino
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='fuel_cost', data=Bulk_PA_Before_ElNino)
plt.title('Distribution of Daily Fuel Cost by Region Pair Before EL Nino')
plt.xlabel('Region Pairs')
plt.ylabel('daily fuel cost ($)')
plt.xticks(rotation=60, ha='right')

# Format y-axis tick labels
def format_y_ticks(value, _):
    return int(value)  # Format as integer

plt.gca().yaxis.set_major_formatter(mticker.FuncFormatter(format_y_ticks))

plt.tight_layout()
plt.show()

"""## **Daily inventory cost**"""

# Create a column inventory_cost
# Initialize the new column
Bulk_rerouted['inventory_cost'] = np.nan
Bulk_PA_Before_ElNino['inventory_cost'] = np.nan

# Calculate the inventory cost
Bulk_rerouted['inventory_cost'] = Bulk_rerouted['cargo_value']*0.25/365
Bulk_PA_Before_ElNino['inventory_cost'] = Bulk_PA_Before_ElNino['cargo_value']*0.25/365
Bulk_rerouted

# Fuel cost distribution after outlier adjustment for Bulk_rerouted
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='inventory_cost', data=Bulk_rerouted)
plt.title('Distribution of Inventory Cost by Region Pair During El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('Inventory cost ($)')
plt.xticks(rotation=60, ha='right')

# Format y-axis tick labels
def format_y_ticks(value, _):
    return int(value)

plt.gca().yaxis.set_major_formatter(mticker.FuncFormatter(format_y_ticks))

plt.tight_layout()
plt.show()

# Fuel cost distribution after outlier adjustment for Bulk_PA_Before_ElNino
plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='inventory_cost', data=Bulk_PA_Before_ElNino)
plt.title('Distribution of Inventory Cost by Region Pair Before El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('Inventory cost ($)')
plt.xticks(rotation=60, ha='right')

# Format y-axis tick labels
def format_y_ticks(value, _):
    return int(value)

plt.gca().yaxis.set_major_formatter(mticker.FuncFormatter(format_y_ticks))

plt.tight_layout()
plt.show()

"""## **Emission Cost**"""

# Initialize the new column
Bulk_rerouted['emissions_cost'] = np.nan
Bulk_rerouted['emissions'] = np.nan
Bulk_PA_Before_ElNino['emissions_cost'] = np.nan
Bulk_PA_Before_ElNino['emissions'] = np.nan

# Calculate the emissions and the emissions cost
Bulk_rerouted['emissions'] = (Bulk_rerouted['daily_fuel_consumption'])*3.114
Bulk_rerouted['emissions_cost'] = Bulk_rerouted['emissions']*100
Bulk_PA_Before_ElNino['emissions'] = (Bulk_PA_Before_ElNino['daily_fuel_consumption'])*3.114
Bulk_PA_Before_ElNino['emissions_cost'] = Bulk_PA_Before_ElNino['emissions']*100

# 3.114 tonne of CO2 / 1 tonne of fuel : factor of emission from Tran et al. (2025)
# 100$ / 1 tonne of CO2e is from Tran et al. (2025)

Bulk_rerouted.head()

"""# **Total Cost Calculation**"""

# Initialize the new column - daily total cost
Bulk_rerouted['daily_total_cost'] = np.nan
Bulk_PA_Before_ElNino['daily_total_cost'] = np.nan

# Calculate the daily total cost
Bulk_rerouted['daily_total_cost'] = Bulk_rerouted['capital_cost'] + Bulk_rerouted['operating_cost'] + Bulk_rerouted['fuel_cost'] + Bulk_rerouted['inventory_cost']+ Bulk_rerouted['emissions_cost']
Bulk_PA_Before_ElNino['daily_total_cost'] = Bulk_PA_Before_ElNino['capital_cost'] + Bulk_PA_Before_ElNino['operating_cost'] + Bulk_PA_Before_ElNino['fuel_cost'] + Bulk_PA_Before_ElNino['inventory_cost']+ Bulk_PA_Before_ElNino['emissions_cost']

# Costs for rerouted voyages
# Calculate the total cost
Bulk_rerouted['rerouted_voy_total_cost'] = Bulk_rerouted['daily_total_cost']*Bulk_rerouted['second_shortest_distance_day']

# Calculate the total cost
Bulk_rerouted['rerouted_total_cost'] = Bulk_rerouted['rerouted_voy_total_cost']*Bulk_rerouted['rerouted_voy']

# Costs for transited voyages
# Calculate the total cost
Bulk_rerouted['transit_voy_total_cost'] =  Bulk_rerouted['canal_fee']+Bulk_rerouted['daily_total_cost']*Bulk_rerouted['voy_sea_duration_day']
Bulk_PA_Before_ElNino['transit_voy_total_cost'] =  Bulk_PA_Before_ElNino['canal_fee']+Bulk_PA_Before_ElNino['daily_total_cost']*Bulk_PA_Before_ElNino['voy_sea_duration_day']

# Calculate the total cost
Bulk_rerouted['transit_total_cost'] =Bulk_rerouted['transit_voy_total_cost']*Bulk_rerouted['number_transits']
Bulk_PA_Before_ElNino['transit_total_cost'] =Bulk_PA_Before_ElNino['transit_voy_total_cost']*Bulk_PA_Before_ElNino['number_transits']

Bulk_rerouted

"""# **Emissions Analysis**"""

# Estimate the amount of increased emissions
# Calculate the total emissions for rerouted voyages per row
Bulk_rerouted['rerouted_voy_emissions'] = Bulk_rerouted['emissions'] * Bulk_rerouted['second_shortest_distance_day'] * Bulk_rerouted['rerouted_voy']
Bulk_rerouted['transit_voy_emissions'] = (Bulk_rerouted['fuel_consumption_mt']* 3.114) * Bulk_rerouted['number_transits']
# Calculate the total emissions for all rerouted voyages
total_rerouted_emissions = Bulk_rerouted['rerouted_voy_emissions'].sum()
# Call the .sum() method to get the numerical value
total_ElNino_emissions = (Bulk_rerouted['transit_voy_emissions'] + Bulk_rerouted['rerouted_voy_emissions']).sum()
# Print the total emissions
print(f"Total emissions from all rerouted vessels: {total_rerouted_emissions:.2f} tonnes of CO2")
print(f"Total emissions from all vessels during El Nino: {total_ElNino_emissions:.2f} tonnes of CO2")

# Emissions if no El Nino
Bulk_rerouted['emissions_normal_conditions'] = (Bulk_rerouted['fuel_consumption_mt'] * (Bulk_rerouted['rerouted_voy'] + Bulk_rerouted['number_transits'])) * 3.114
total_emissions_normal_conditions = Bulk_rerouted['emissions_normal_conditions'].sum()
print(f"Total emissions  from all vessels if base scenario (no El Nino): {total_emissions_normal_conditions:.2f} tonnes of CO2")

# Calculate the increase in total emissions
increase_in_emissions = total_ElNino_emissions - total_emissions_normal_conditions
print(f"Increase in total emissions: {increase_in_emissions:.2f} tonnes of CO2")

# Calculate the percentage increase
increase_in_emissions_percentage = (increase_in_emissions / total_emissions_normal_conditions) * 100
print(f"Increase in total emissions: {increase_in_emissions_percentage:.2f} %")

# Emissions increase from the transit and the rerouted vessels
# Calculate the emissions increase for the transit based on the voyage distance (distance_94)
Bulk_rerouted['voy_emissions_increase_transits'] = Bulk_rerouted['emissions'] * (Bulk_rerouted['voy_sea_duration_day'] - Bulk_rerouted['distance_94']/(13*24))

# Calculate the emissions increase due to rerouting based on the estimated shortest time
Bulk_rerouted['voy_emissions_increase_rerouted'] = Bulk_rerouted['emissions'] * (Bulk_rerouted['second_shortest_distance_day'] - Bulk_rerouted['shortest_distance_day'])

# Calculate the emissions increase per voyage
Bulk_rerouted['emissions_increase'] = Bulk_rerouted['voy_emissions_increase_transits'] * Bulk_rerouted['number_transits'] + Bulk_rerouted['voy_emissions_increase_rerouted'] * Bulk_rerouted['rerouted_voy']

# Calculate the total emissions during El Nino
Bulk_rerouted['total_emissions_El_Nino'] = Bulk_rerouted['emissions'] * (Bulk_rerouted['number_transits'] * Bulk_rerouted['voy_sea_duration_day'] + Bulk_rerouted['rerouted_voy'] * Bulk_rerouted['second_shortest_distance_day'])

# Group by region_pairs and calculate the sum of emissions increase and total emissions El Nino
emissions_summary_by_region = Bulk_rerouted.groupby('region_pairs', observed=False)[['emissions_increase', 'total_emissions_El_Nino']].sum()

# Add 'Emmissions no disruption' column
emissions_summary_by_region['Emissions_no_disruption'] = emissions_summary_by_region['total_emissions_El_Nino'] - emissions_summary_by_region['emissions_increase']

# Calculate '% emissions increase during EL Nino'
emissions_summary_by_region['Percent_emissions_increase_ELNino'] = (emissions_summary_by_region['emissions_increase'] / emissions_summary_by_region['Emissions_no_disruption']) * 100

# Sort the DataFrame by 'Percent_emissions_increase_ELNino' in descending order BEFORE adding the total row
emissions_summary_by_region = emissions_summary_by_region.sort_values(by='Percent_emissions_increase_ELNino', ascending=False)

# Add a total row
total_row = emissions_summary_by_region.sum()

# Calculate the total percentage increase separately for the 'Total' row
total_row['Percent_emissions_increase_ELNino'] = (total_row['emissions_increase'] / total_row['Emissions_no_disruption']) * 100

emissions_summary_by_region.loc['Total'] = total_row

# Reset index to make 'region_pairs' a column
emissions_summary_by_region = emissions_summary_by_region.reset_index()

# Rename columns
emissions_summary_by_region = emissions_summary_by_region.rename(columns={
    'region_pairs': 'Region Pairs',
    'voy_emissions_increase': 'Emissions increase (tonnes of CO2)',
    'total_emissions_El_Nino': 'Total emissions El Nino (tonnes of CO2)',
    'Emissions_no_disruption': 'Emmissions no disruption (tonnes of CO2)',
    'Percent_emissions_increase_ELNino': 'Percent emissions increase during El Nino (%)'
})

# Set pandas display option to show different decimal places for specific columns
pd.options.display.float_format = lambda x: '{:,.0f}'.format(x) if abs(x) >= 100 else '{:,.2f}'.format(x)


# Display the results in a table
display(emissions_summary_by_region)

"""# Voyage Cost Analysis"""

# Cost Differential Analysis
# Create new variables
# Calculate cost increase for the transit based on the voyage distance (distance_94)
Bulk_rerouted['voy_cost_increase_transits'] = Bulk_rerouted['daily_total_cost'] * (Bulk_rerouted['voy_sea_duration_day'] - Bulk_rerouted['distance_94']/(13*24)) + Bulk_rerouted['canal_fee']

# Replace values less than 0 in 'cost_increase_voy_sea_duration' with 0
# The clip(lower=0) method replaces all values below the specified lower bound with the lower bound.
Bulk_rerouted['voy_cost_increase_transits'] = Bulk_rerouted['voy_cost_increase_transits'].clip(lower=0)

# Calculate cost increase due to rerouting based on the estimated shortest time
Bulk_rerouted['voy_cost_increase_rerouted'] = Bulk_rerouted['daily_total_cost'] * (Bulk_rerouted['second_shortest_distance_day'] - Bulk_rerouted['shortest_distance_day'])

# Creat a box plot per region pair
# Melt the DataFrame to have 'variable' and 'value' columns for plotting
df_melted_costs = Bulk_rerouted.melt(
    id_vars=['region_pairs'],
    value_vars=['voy_cost_increase_transits', 'voy_cost_increase_rerouted'],
    var_name='Cost Type',
    value_name='Cost Differential'
)

# Rename the Cost Type values for the legend
cost_type_names = {
    'voy_cost_increase_transits': 'Transits: Average cost increase per voyage due to waiting time at the canal and toll fee',
    'voy_cost_increase_rerouted': 'Rerouted: Average cost increase per voyage due to rerouting based on the theoretical shortest distance'
}
df_melted_costs['Cost Type'] = df_melted_costs['Cost Type'].map(cost_type_names)


plt.figure(figsize=(15, 8))
sns.boxplot(x='region_pairs', y='Cost Differential', hue='Cost Type', data=df_melted_costs, palette='viridis')
plt.title('Distribution of Voyage Cost Increases by Region Pair - Transits and Rerouted')
plt.xlabel('Region Pairs')
plt.ylabel('Cost ($)')
plt.xticks(rotation=60, ha='right')

# Get the current axes
ax = plt.gca()

# Set minor tick locations manually between the major ticks
ax.xaxis.set_minor_locator(mticker.FixedLocator(np.arange(0.5, len(Bulk_rerouted['region_pairs'].unique()), 1)))

# Add vertical minor grid lines
ax.xaxis.grid(which='minor', linestyle='--', alpha=0.6)

plt.tight_layout()
plt.show()

"""# Cost per Voyage Intake (per tonne analysis)"""

# Group by region_pairs and calculate the sum of cost increase and cargo intake
cost_impact_by_region = Bulk_rerouted.groupby('region_pairs', observed=False).agg(
    number_transited=('number_transits', 'sum'),
    number_rerouted=('rerouted_voy', 'sum'),
    total_cost_increase_transit=('voy_cost_increase_transits', 'sum'),
    total_cost_increase_rerouted=('voy_cost_increase_rerouted', 'sum'),
    total_cargo_intake_transit=('voy_intake_sum', 'sum')
)
# --------
# For rerouted vessels
# Calculate the average of voy_intake_mt for each region pair
Bulk_PA_Before_ElNino['voy_intake_mean'] = Bulk_PA_Before_ElNino['voy_intake_sum']/Bulk_PA_Before_ElNino['number_transits']
# Groupby the voyage intake by region pair
average_voy_intake_before_elnino = Bulk_PA_Before_ElNino.groupby('region_pairs', observed=False)['voy_intake_mean'].mean()
rerouted_voy_elnino = Bulk_rerouted.groupby('region_pairs', observed=False)['rerouted_voy'].sum()
# Merge average_voy_intake_before_elnino and rerouted_voy_elnino on index
voyage_intake = pd.merge(average_voy_intake_before_elnino, rerouted_voy_elnino, left_index=True, right_index=True)
# Calculate the total transported cargo capacity per region for the rerouted vessels
voyage_intake['total_cargo_intake_rerouted'] = voyage_intake['rerouted_voy'] * voyage_intake['voy_intake_mean']
# voyage_intake['total_cargo_intake'] to cost_impact_by_region by region_pair
cost_impact_by_region = cost_impact_by_region.merge(voyage_intake['total_cargo_intake_rerouted'], left_index=True, right_index=True)
# -------

# Calculate the cost increase per tonne for each region pair
# Using the total cargo intake calculated during El Nino (total_cargo_intake) for transited
cost_impact_by_region['cost_increase_per_tonne_transited'] = cost_impact_by_region['total_cost_increase_transit'] / cost_impact_by_region['total_cargo_intake_transit']
# Using the total cargo intake calculated during El Nino (total_cargo_intake) for rerouted
cost_impact_by_region['cost_increase_per_tonne_rerouted'] = cost_impact_by_region['total_cost_increase_rerouted'] / cost_impact_by_region['total_cargo_intake_rerouted']

# Filter in descending for Cost Increase per Tonne
cost_impact_by_region = cost_impact_by_region.sort_values(by='cost_increase_per_tonne_rerouted', ascending=False)

# Calculate the total sum for the original columns
total_rerouted_sum = cost_impact_by_region['number_rerouted'].sum()
total_transited_sum = cost_impact_by_region['number_transited'].sum()
total_cost_increase_rerouted = cost_impact_by_region['total_cost_increase_rerouted'].sum()
total_cargo_intake_rerouted_sum = cost_impact_by_region['total_cargo_intake_rerouted'].sum()
total_cost_increase_transited = cost_impact_by_region['total_cost_increase_transit'].sum()
total_cargo_intake_transited_sum = cost_impact_by_region['total_cargo_intake_transit'].sum()


# Calculate the cost increase per tonne for the 'Total' row
total_cost_increase_per_tonne_rerouted = total_cost_increase_rerouted / total_cargo_intake_rerouted_sum
total_cost_increase_per_tonne_transited = total_cost_increase_transited / total_cargo_intake_transited_sum

# Create the 'Total' row as a pandas Series using original names
total_row = pd.Series({
    'number_rerouted': total_rerouted_sum,
    'number_transited': total_transited_sum,
    'total_cost_increase_rerouted': total_cost_increase_rerouted,
    'total_cost_increase_transit': total_cost_increase_transited,
    'total_cargo_intake_rerouted': total_cargo_intake_rerouted_sum,
    'total_cargo_intake_transit': total_cargo_intake_transited_sum,
    'cost_increase_per_tonne_rerouted': total_cost_increase_per_tonne_rerouted,
    'cost_increase_per_tonne_transited': total_cost_increase_per_tonne_transited
}, name='Total')

# Add the 'Total' row to the DataFrame
cost_impact_by_region = pd.concat([cost_impact_by_region, pd.DataFrame([total_row])])

# Rename columns for better readability
cost_impact_by_region = cost_impact_by_region.rename(columns={
    'number_rerouted': 'Number of Rerouted Vessels',
    'number_transited': 'Number of Transited Vessels',
    'total_cost_increase_rerouted': 'Total Cost Increase for Rerouted ($)',
    'total_cost_increase_transit': 'Total Cost Increase Transited ($)',
    'total_cargo_intake_rerouted': 'Total Cargo Transported Rerouted (tonnes)',
    'cost_increase_per_tonne_rerouted': 'Cost Increase per Tonne for Rerouted ($)',
    'total_cargo_intake_transit': 'Total Cargo Transported Transited (tonnes)',
    'cost_increase_per_tonne_transited': 'Cost Increase per Tonne for Transited'
})

# Reset the index to make the index a column
cost_impact_by_region = cost_impact_by_region.reset_index()

# Rename the index column to 'Region Pair'
cost_impact_by_region = cost_impact_by_region.rename(columns={'index': 'Region Pairs'})

# Set pandas display option to show different decimal places for specific columns
pd.options.display.float_format = lambda x: '{:,.0f}'.format(x) if abs(x) >= 10 else '{:,.2f}'.format(x)

# Display the table
display(cost_impact_by_region)

"""# **Data Distribution Analysis**"""

# voy_sea_duration_day vs second_shourtest_route_days analysis per region pair
# Melt the DataFrame to have 'variable' and 'value' columns for plotting
df_melted = Bulk_rerouted.melt(
    id_vars=['region_pairs'],
    value_vars=['voy_sea_duration_day', 'second_shortest_distance_day'],
    var_name='Duration_Type',
    value_name='Duration_Days'
)

plt.figure(figsize=(15, 8))
sns.boxplot(x='region_pairs', y='Duration_Days', hue='Duration_Type', data=df_melted)
plt.title('Distribution of Sea Voyage Duration and Second Shortest Route Duration by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('Duration (days)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

# Voy_sea_duration_h VS shortest_detour_day

# Add the calculated columns to the DataFrame
Bulk_rerouted['transit_time_day'] = Bulk_rerouted['voy_sea_duration_day'] - Bulk_rerouted['shortest_distance_day']


plt.figure(figsize=(12, 8))
# Use the column names from the DataFrame
sns.scatterplot(x='voy_sea_duration_day', y='shortest_distance_day', data=Bulk_rerouted)
plt.title('Comparison of voyage sea duration and the shortest duration (13kn and no waiting)')
plt.xlabel('voy_sea_duration_day')
plt.ylabel('shortest_distance_day')
plt.xticks(rotation=60, ha='right')

#histogram of transit_time_day
plt.figure(figsize=(12, 8))
sns.histplot(x='transit_time_day', data=Bulk_rerouted)
plt.title('Distribution of waiting time assuming a speed of 13kn')
plt.xlabel('Extra time in days')
plt.ylabel('Frequency')
plt.xticks(rotation=60, ha='right')

"""# Voyage Cost Distribution Analysis"""

# Histogram of transit_voy_total_cost
plt.figure(figsize=(12, 8))
sns.histplot(x='transit_voy_total_cost', data=Bulk_rerouted)

sns.histplot(x='rerouted_voy_total_cost', data=Bulk_rerouted)
plt.title('Distribution of total voyage cost for transit and rerouted vessels')
plt.xlabel('Total voyage cost (100,000$)')
plt.ylabel('Frequency')



# Add legend
plt.legend(['transit_voy_total_cost', 'rerouted_voy_total_cost'])

# Statistics of the variables
display(Bulk_rerouted['transit_voy_total_cost'].describe())
display(Bulk_rerouted['rerouted_voy_total_cost'].describe())

# Sum of rerouted total cost and of transit total cost
print(Bulk_rerouted['rerouted_total_cost'].sum())
print(Bulk_rerouted['transit_total_cost'].sum())

Bulk_rerouted.head()

# Distribution of total voyage cost (rerouted VS transit) per region pairs
df_melted = Bulk_rerouted.melt(
    id_vars=['region_pairs'],
    value_vars=['transit_voy_total_cost', 'rerouted_voy_total_cost'],
    var_name='Route',
    value_name='voyage_cost'
)

plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='voyage_cost', hue='Route', data=df_melted)
plt.title('Distribution of Transit and Rerouted Voyage Cost by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('Voyage cost ($)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

# Statistics of the box plots for each region pairs and route
box_plot_stats = df_melted.groupby(['region_pairs', 'Route'])['voyage_cost'].describe()
display(box_plot_stats)

# Total voyage cost distribution per region pairs
df_melted = Bulk_rerouted.melt(
    id_vars=['region_pairs'],
    value_vars=['transit_total_cost', 'rerouted_total_cost'],
    var_name='Route',
    value_name='Total_cost'
)

plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='Total_cost', hue='Route', data=df_melted)
plt.title('Distribution of Transit and Rerouted Total Cost by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('Total cost ($)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

"""Some box plot include 0 which illustrates that for some months, the region pairs did not have voyage. East Asia - NE America is largely bigger than the other region pairs has it contains more voyages and each voyage is expensive due to the distance."""

# Boxplot number transits and rerouted_yoy per region pairs
df_melted = Bulk_rerouted.melt(
    id_vars=['region_pairs'],
    value_vars=['number_transits', 'rerouted_voy'],
    var_name='Route',
    value_name='Number'
)

plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='Number', hue='Route', data=df_melted)
plt.title('Distribution of number of Transit and Rerouted voyages by Region Pair')
plt.xlabel('Region Pairs')
plt.ylabel('Number of Voyages per Month')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

# Comparison Total Cost with El Nino VS normal conditions

# Add Total Cost to Bulk_rerouted
Bulk_rerouted['Total_cost_normal_conditions'] = Bulk_rerouted['transit_voy_total_cost'] * (Bulk_rerouted['rerouted_voy']+Bulk_rerouted['number_transits'])
Bulk_rerouted['Total_cost_normal_conditions_shrotest_time'] =  (Bulk_rerouted['canal_fee']+Bulk_rerouted['daily_total_cost']*Bulk_rerouted['shortest_distance_day']) * (Bulk_rerouted['rerouted_voy']+Bulk_rerouted['number_transits'])
Bulk_rerouted['Total_cost_El_Nino'] = Bulk_rerouted['transit_total_cost'] + Bulk_rerouted['rerouted_total_cost']

# Boxplot of Total_cost_normal_conditions VS Total_cost_El_Nino
df_melted = Bulk_rerouted.melt(
    id_vars=['region_pairs'],
    value_vars=['Total_cost_normal_conditions', 'Total_cost_El_Nino', 'Total_cost_normal_conditions_shrotest_time'],
    var_name='Scenario',
    value_name='Total_cost'
)

# Map the old value names to the new desired names for the plot legend
scenario_names = {
    'Total_cost_normal_conditions': 'Total cost assuming normal conditions (all rerouted transited)',
    'Total_cost_El_Nino': 'Total cost El Nino',
    'Total_cost_normal_conditions_shrotest_time': 'Total cost assuming normal conditions (if no waiting time)'
}

# Apply the mapping to the 'Scenario' column
df_melted['Scenario'] = df_melted['Scenario'].map(scenario_names)

plt.figure(figsize=(12, 8))
sns.boxplot(x='region_pairs', y='Total_cost', hue='Scenario', data=df_melted)

plt.title('Distribution of the Total Cost by Region Pair in Normal Market Conditions VS Disruption')
plt.xlabel('Region Pairs')
plt.ylabel('Total cost per Month')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

# Calculate the sum of costs for each region pair
cost_summary = Bulk_rerouted.groupby('region_pairs')[['Total_cost_normal_conditions', 'Total_cost_El_Nino']].sum()

# Calculate the difference in costs
cost_summary['Cost_Difference'] = cost_summary['Total_cost_El_Nino'] - cost_summary['Total_cost_normal_conditions']

# Calculate the total sum for each column
total_row = cost_summary.sum()

# Add the total sum row to the DataFrame
cost_summary.loc['Total'] = total_row

# Set pandas display option to show full numbers
pd.options.display.float_format = '{:,.0f}'.format

# Cost_difference (%)
cost_summary['Cost_Difference_Percentage'] = (cost_summary['Cost_Difference'] / cost_summary['Total_cost_normal_conditions']) * 100

# Display the results in a table
display(cost_summary)

# Distribution of Sea Voyage Duration by Region Pair: Before and During El Nino

# Combine the two dataframes for easier plotting
combined_df = pd.concat([
    Bulk_PA_Before_ElNino.assign(period='Before El Nino'),
    Bulk_rerouted.assign(period='During El Nino')
])

# Create the box plot
plt.figure(figsize=(15, 8))
sns.boxplot(x='region_pairs', y='voy_sea_duration_day', hue='period', data=combined_df)
plt.title('Distribution of Sea Voyage Duration by Region Pair: Before and During El Nino')
plt.xlabel('Region Pairs')
plt.ylabel('Sea Voyage Duration (days)')
plt.xticks(rotation=60, ha='right')
plt.tight_layout()
plt.show()

"""As illustrated by the graph, the voyage duration is much more volatile in El Nino period."""

# Pie chart for cost components for transited vessels
# Create a copy of the Bulk_rerouted DataFrame
Bulk_rerouted_copy = Bulk_rerouted.copy()

# Calculate the voyage cost for each component (excluding canal_fee) in the copied DataFrame
Bulk_rerouted_copy['voy_capital_cost'] = Bulk_rerouted_copy['capital_cost'] * (Bulk_rerouted_copy['voy_sea_duration_day'])
Bulk_rerouted_copy['voy_operating_cost'] = Bulk_rerouted_copy['operating_cost'] * (Bulk_rerouted_copy['voy_sea_duration_day'])
Bulk_rerouted_copy['voy_fuel_cost'] = Bulk_rerouted_copy['fuel_cost'] * (Bulk_rerouted_copy['voy_sea_duration_day'])
Bulk_rerouted_copy['voy_inventory_cost'] = Bulk_rerouted_copy['inventory_cost'] * (Bulk_rerouted_copy['voy_sea_duration_day'])
Bulk_rerouted_copy['voy_emissions_cost'] = Bulk_rerouted_copy['emissions_cost'] * (Bulk_rerouted_copy['voy_sea_duration_day'])
Bulk_rerouted_copy['voy_canal_fee'] = Bulk_rerouted_copy['canal_fee']

# Calculate the average of each voyage cost component from the copied DataFrame
average_voyage_costs = Bulk_rerouted_copy[['voy_capital_cost', 'voy_operating_cost', 'voy_fuel_cost', 'voy_inventory_cost', 'voy_emissions_cost', 'voy_canal_fee']].mean()

# Calculate the total average transit voyage cost
total_average_transit_voy_cost = average_voyage_costs.sum()

# Calculate the percentage of each cost component
voyage_cost_percentages = (average_voyage_costs / total_average_transit_voy_cost) * 100

# Create custom labels with percentage and actual value, removing 'voy_' prefix and underscores
labels = [f'{label.replace("voy_", "").replace("_", " ")}\n${value:,.0f} ({percentage:.1f}%)' for label, value, percentage in zip(average_voyage_costs.index, average_voyage_costs, voyage_cost_percentages)]

# Create a pie chart
plt.figure(figsize=(6, 6))
plt.pie(voyage_cost_percentages, labels=labels, autopct='', startangle=140)
plt.title(f'Percentage of Each Cost Component in Voyage Total Cost for Transited Vessles\nAverage Total: ${total_average_transit_voy_cost:,.0f}', pad=20)
plt.axis('equal')
plt.show()

# Pie chart for cost compenets for rerouted vessels
# Calculate the voyage cost for each component for rerouted voyages
Bulk_rerouted_copy['rerouted_voy_capital_cost'] = Bulk_rerouted_copy['capital_cost'] * Bulk_rerouted_copy['second_shortest_distance_day']
Bulk_rerouted_copy['rerouted_voy_operating_cost'] = Bulk_rerouted_copy['operating_cost'] * Bulk_rerouted_copy['second_shortest_distance_day']
Bulk_rerouted_copy['rerouted_voy_fuel_cost'] = Bulk_rerouted_copy['fuel_cost'] * Bulk_rerouted_copy['second_shortest_distance_day']
Bulk_rerouted_copy['rerouted_voy_inventory_cost'] = Bulk_rerouted_copy['inventory_cost'] * Bulk_rerouted_copy['second_shortest_distance_day']
Bulk_rerouted_copy['rerouted_voy_emissions_cost'] = Bulk_rerouted_copy['emissions_cost'] * Bulk_rerouted_copy['second_shortest_distance_day']

# Calculate the average of each voyage cost component for rerouted voyages
average_rerouted_voyage_costs = Bulk_rerouted_copy[['rerouted_voy_capital_cost', 'rerouted_voy_operating_cost', 'rerouted_voy_fuel_cost', 'rerouted_voy_inventory_cost', 'rerouted_voy_emissions_cost']].mean()

# Calculate the total average rerouted voyage cost
total_average_rerouted_voy_cost = average_rerouted_voyage_costs.sum()

# Calculate the percentage of each cost component
rerouted_voyage_cost_percentages = (average_rerouted_voyage_costs / total_average_rerouted_voy_cost) * 100

# Create custom labels with percentage and actual value, removing 'rerouted_voy_' prefix and underscores
labels = [f'{label.replace("rerouted_voy_", "").replace("_", " ")}\n${value:,.0f} ({percentage:.1f}%)' for label, value, percentage in zip(average_rerouted_voyage_costs.index, average_rerouted_voyage_costs, rerouted_voyage_cost_percentages)]

# Create a pie chart
plt.figure(figsize=(6, 6))
plt.pie(rerouted_voyage_cost_percentages, labels=labels, autopct='', startangle=140)
plt.title(f'Percentage of Each Cost Component in Voyage Total Cost for Rerouted Vessles\nAverage Total: ${total_average_rerouted_voy_cost:,.0f}', pad=20)
plt.axis('equal')
plt.show()